name: Remote UCCL Low Latency Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: remote-uccl-build
  cancel-in-progress: false

jobs:
  build-on-nodes:
    # Don’t run on forked PRs (secrets aren’t available and remote SSH would fail).
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && !github.event.pull_request.head.repo.fork)
    runs-on: ubuntu-latest
    permissions:
      contents: read
    timeout-minutes: 25

    steps:
      - name: Checkout (for artifacts/consistency)
        uses: actions/checkout@v4

      - name: Setup SSH (p4_gate → gh1/gh2)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          echo "${{ secrets.UCCL_DEV_SSH_KEY }}" > ~/.ssh/uccl-dev
          chmod 600 ~/.ssh/uccl-dev

          cat > ~/.ssh/config <<'EOF'
          Host gh1
              User yangzhou_ucberkeley
              HostName localhost
              Port 34455
              ForwardAgent yes
              ProxyCommand ssh -W %h:%p p4_gate
              StrictHostKeyChecking no
              IdentityFile ~/.ssh/uccl-dev

          Host gh2
              User yangzhou_ucberkeley
              HostName localhost
              Port 34456
              ForwardAgent yes
              ProxyCommand ssh -W %h:%p p4_gate
              StrictHostKeyChecking no
              IdentityFile ~/.ssh/uccl-dev

          Host p4_gate
              HostName 98.84.112.172
              User ubuntu
              ForwardAgent yes
              StrictHostKeyChecking no
              IdentityFile ~/.ssh/uccl-dev
          EOF
          chmod 600 ~/.ssh/config

          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/uccl-dev
          ssh-keyscan -H 98.84.112.172 >> ~/.ssh/known_hosts || true

      - name: Sync repo to gh1 & gh2
        shell: bash
        run: |
          set -euo pipefail
          git submodule update --init --recursive thirdparty/nccl

          sync_to_host() {
            local H="$1"
            echo ">>> Syncing to $H"
            rsync -az --delete \
              -e "ssh -o BatchMode=yes -A" \
              ./ "$H:/home/yangzhou_ucberkeley/uccl-test/"
          }

          sync_to_host gh1 &
          pid1=$!
          sync_to_host gh2 &
          pid2=$!
          wait $pid1
          wait $pid2

      - name: Build & install on gh1 & gh2 (conda env uccl)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p logs

            build_on_host() {
            local H="$1"
            echo ">>> Building on $H"

            ssh -A -o BatchMode=yes "$H" 'bash -lc "
                set -euo pipefail
                source \$HOME/miniconda3/etc/profile.d/conda.sh
                conda activate uccl

                cd /home/yangzhou_ucberkeley/uccl-test/ep
                make clean || true
                set -o pipefail
                make -j install 2>&1 | tee build.log

                grep -q \"Installation complete. Modules installed as:\" build.log
            "'
            }

          build_on_host gh1 &
          pid1=$!
          build_on_host gh2 &
          pid2=$!
          wait $pid1
          wait $pid2

      - name: Fetch remote build logs
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p logs
          scp -o BatchMode=yes -A gh1:/home/yangzhou_ucberkeley/uccl-test/ep/build.log logs/gh1_build.log || true
          scp -o BatchMode=yes -A gh2:/home/yangzhou_ucberkeley/uccl-test/ep/build.log logs/gh2_build.log || true

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dual-node-build-logs
          path: logs/