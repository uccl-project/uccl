name: Remote UCCL Low Latency Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: remote-uccl-build
  cancel-in-progress: false

jobs:
  build-on-nodes:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && !github.event.pull_request.head.repo.fork)
    runs-on: ubuntu-latest
    permissions:
      contents: read
    timeout-minutes: 30

    steps:
      - name: Checkout (for artifacts/consistency)
        uses: actions/checkout@v4

      - name: Setup SSH (p4_gate â†’ gh1/gh2)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          echo "${{ secrets.UCCL_DEV_SSH_KEY }}" > ~/.ssh/uccl-dev
          chmod 600 ~/.ssh/uccl-dev

          cat > ~/.ssh/config <<'EOF'
          Host gh1
              User yangzhou_ucberkeley
              HostName localhost
              Port 34455
              ForwardAgent yes
              ProxyCommand ssh -W %h:%p p4_gate
              StrictHostKeyChecking no
              IdentityFile ~/.ssh/uccl-dev

          Host gh2
              User yangzhou_ucberkeley
              HostName localhost
              Port 34456
              ForwardAgent yes
              ProxyCommand ssh -W %h:%p p4_gate
              StrictHostKeyChecking no
              IdentityFile ~/.ssh/uccl-dev

          Host p4_gate
              HostName 98.84.112.172
              User ubuntu
              ForwardAgent yes
              StrictHostKeyChecking no
              IdentityFile ~/.ssh/uccl-dev
          EOF
          chmod 600 ~/.ssh/config

          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/uccl-dev
          ssh-keyscan -H 98.84.112.172 >> ~/.ssh/known_hosts || true

      - name: Sync repo to gh1 & gh2
        shell: bash
        run: |
          set -euo pipefail
          git submodule update --init --recursive thirdparty/nccl

          sync_to_host() {
            local H="$1"
            echo ">>> Syncing to $H"
            rsync -az --delete -e "ssh -o BatchMode=yes -A" ./ "$H:/home/yangzhou_ucberkeley/uccl-test/"
          }

          sync_to_host gh1 &
          pid1=$!
          sync_to_host gh2 &
          pid2=$!
          wait $pid1
          wait $pid2

      - name: Build & install on gh1 & gh2 (conda env uccl)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p logs

          build_on_host() {
            local H="$1"
            echo ">>> Building on $H"
            ssh -A -o BatchMode=yes "$H" 'bash -lc "
              set -euo pipefail

              if [ -f \$HOME/miniconda3/etc/profile.d/conda.sh ]; then
                source \$HOME/miniconda3/etc/profile.d/conda.sh
              elif [ -f \$HOME/miniforge3/etc/profile.d/conda.sh ]; then
                source \$HOME/miniforge3/etc/profile.d/conda.sh
              else
                echo "conda.sh not found under \$HOME/{miniconda3,miniforge3}"
                exit 1
              fi

              conda info --envs | awk '{print \$1}' | grep -qx uccl || conda create -y -n uccl python=3.11
              conda activate uccl

              python -m pip install -q --upgrade pip
              pip install -q pybind11
              pip install -q torch --index-url https://download.pytorch.org/whl/cu124

              cd /home/yangzhou_ucberkeley/uccl-test/ep
              make clean || true
              set -o pipefail
              make -j install 2>&1 | tee build.log

              if grep -q "Installation complete. Modules installed as:" build.log; then
                echo "Build completed successfully on '"$H"'"
                exit 0
              else
                echo "Build marker missing on '"$H"'"
                exit 1
              fi
            "' | tee "logs/${H}_build.log"
          }

          build_on_host gh1 &
          pid1=$!
          build_on_host gh2 &
          pid2=$!

          fail=0
          wait "$pid1" || fail=1
          wait "$pid2" || fail=1
          if [ "$fail" -ne 0 ]; then
            echo "Build failed on at least one host"
            exit 1
          fi
          echo "Build succeeded on both hosts"

      - name: Run low-latency test on gh1 & gh2 (torchrun)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p logs

          run_ll() {
            local H="$1"
            local RANK="$2"
            echo ">>> Launching torchrun on $H (rank=$RANK)"
            ssh -A -o BatchMode=yes "$H" 'bash -lc "
              set -euo pipefail

              if [ -f \$HOME/miniconda3/etc/profile.d/conda.sh ]; then
                source \$HOME/miniconda3/etc/profile.d/conda.sh
              elif [ -f \$HOME/miniforge3/etc/profile.d/conda.sh ]; then
                source \$HOME/miniforge3/etc/profile.d/conda.sh
              else
                echo "conda.sh not found under \$HOME/{miniconda3,miniforge3}"
                exit 1
              fi
              conda activate uccl

              cd /home/yangzhou_ucberkeley/uccl-test/ep
              set -o pipefail
              torchrun \
                --nnodes=2 --nproc_per_node=1 \
                --node_rank='"$RANK"' \
                --master_addr=10.141.1.1 --master_port=12357 \
                bench/test_low_latency.py \
                --num-tokens=128 --hidden=7168 --num-topk=1 --num-experts=24 2>&1 | tee torchrun.log
            "' | tee "logs/${H}_torchrun.log"
          }

          run_ll gh2 1 &
          pid2=$!
          sleep 1
          run_ll gh1 0 &
          pid1=$!

          fail=0
          wait "$pid1" || fail=1
          wait "$pid2" || fail=1
          if [ "$fail" -ne 0 ]; then
            echo "Low-latency test failed on at least one host"
            exit 1
          fi
          echo "Low-latency test passed on both hosts"

      - name: Fetch remote logs (build + torchrun)
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p logs
          scp -o BatchMode=yes -A gh1:/home/yangzhou_ucberkeley/uccl-test/ep/build.log logs/gh1_build.log || true
          scp -o BatchMode=yes -A gh2:/home/yangzhou_ucberkeley/uccl-test/ep/build.log logs/gh2_build.log || true
          scp -o BatchMode=yes -A gh1:/home/yangzhou_ucberkeley/uccl-test/ep/torchrun.log logs/gh1_torchrun_remote.log || true
          scp -o BatchMode=yes -A gh2:/home/yangzhou_ucberkeley/uccl-test/ep/torchrun.log logs/gh2_torchrun_remote.log || true

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dual-node-build-and-ll-logs
          path: logs/